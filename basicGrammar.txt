字符串：

    字符串可以使用+连接任意字符串和其他数据类型
    如果用+连接字符串和其他数据类型，会将其他数据类型先自动转型为字符串再进行连接。

    如果我们要表示多行字符串，使用+号连接会非常不方便：
    String s = "first line \n"
         + "second line \n"
         + "end";

    从Java 13开始，字符串可以用"""..."""表示多行字符串（Text Blocks）了：
    String s = """
                SELECT * FROM
                  users
                WHERE id > 100
                ORDER BY name DESC
                """;

    字符串不可变：
    s = "hello"；
    执行String s = "hello";时，JVM虚拟机先创建字符串"hello"，然后，把字符串变量s指向它；
    s = "java"；
    紧接着，执行s = "java";时，JVM虚拟机先创建字符串"world"，然后，把字符串变量s指向它；
    原来的字符串"hello"还在，只是我们无法通过变量s访问它而已。

数组：

    定义一个数组类型的变量，使用数组类型“类型[]”
    int[] ns = new int[5];

    可以在定义数组时直接指定初始化的元素，这样就不必写出数组大小，而是由编译器自动推算数组大小：
    int[] ns = new int[] { 68, 79, 91, 85, 62 };
    还可以进一步简写为：
    int[] ns = { 68, 79, 91, 85, 62 };

    Java的数组有几个特点：
      数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false；
      数组一旦创建后，大小就不可改变。

    多维数组：

      int[][] ns = {
          { 1, 2, 3, 4 },
          { 5, 6, 7, 8 },
          { 9, 10, 11, 12 }
        };
      System.out.println(ns.length); // 3

      二维数组的每个数组元素的长度并不要求相同：
        int[][] ns = {
          { 1, 2, 3, 4 },
          { 5, 6 },
          { 7, 8, 9 }
        };

IO：

  输出：

    使用System.out.println()来向屏幕输出一些内容
    println是print line的缩写，表示输出并换行。
    因此，如果输出后不想换行，可以用print()

    格式化输出：

      double d = 3.1415926;
      System.out.printf("%.2f\n", d); // 显示两位小数3.14
      System.out.printf("%.4f\n", d); // 显示4位小数3.1416

      %d	格式化输出整数
      %x	格式化输出十六进制整数
      %f	格式化输出浮点数
      %e	格式化输出科学计数法表示的浮点数
      %s	格式化字符串

  输入：

    import java.util.Scanner; // 首先，我们通过import语句导入java.util.Scanner

    Scanner scanner = new Scanner(System.in); // 创建Scanner对象并传入System.in，System.in代表标准输入流

    String name = scanner.nextLine(); // 读取一行输入并获取字符串
    int age = scanner.nextInt(); // 读取一行输入并获取整数

判断语句：

  switch：

    使用switch时，如果遗漏了break，就会造成严重的逻辑错误，而且不易在源代码中发现错误
    从Java 12开始，switch语句升级为更简洁的表达式语法：
      使用类似模式匹配（Pattern Matching）的方法，保证只有一种路径会被执行，并且不需要break语句：
      String fruit = "apple";
      switch (fruit) {
        case "apple" -> System.out.println("Selected apple");
        case "pear" -> System.out.println("Selected pear");
        case "mango" -> {
            System.out.println("Selected mango");
            System.out.println("Good choice!");
        }
        default -> System.out.println("No fruit selected");
      }

    使用新的switch语法，不但不需要break，还可以直接返回值：
      String fruit = "apple";
      int opt = switch (fruit) {
          case "apple" -> 1;
          case "pear", "mango" -> 2;
          default -> 0;
      }; // 注意赋值语句要以;结束
      System.out.println("opt = " + opt);

    如果需要返回复杂的语句，我们也可以写很多语句，放到{...}里，然后，用yield返回一个值作为switch语句的返回值：
      String fruit = "orange";
      int opt = switch (fruit) {
          case "apple" -> 1;
          case "pear", "mango" -> 2;
          default -> {
              int code = fruit.hashCode();
              yield code; // switch语句返回值
          }
        };
      System.out.println("opt = " + opt);

  for：

    for循环经常用来遍历数组，因为通过计数器可以根据索引来访问数组的每个元素
    但是，很多时候，我们实际上真正想要访问的是数组每个元素的值。Java还提供了另一种for each循环，它可以更简单地遍历数组：
      int[] ns = { 1, 4, 9, 16, 25 };
      for (int n : ns) {
          System.out.println(n);
      }
    和for循环相比，for each循环的变量n不再是计数器，而是直接对应到数组的每个元素。
    for each循环的写法也更简洁。但是，for each循环无法指定遍历顺序，也无法获取数组的索引。
    
  break &  continue:

    break会跳出当前循环，也就是整个循环都不会执行了。而continue则是提前结束本次循环，直接继续执行下次循环。

数组遍历：
   
  对于遍历一般使用for & for each
  
  // 得到的是数组在JVM中的引用地址:
      int[] ns = { 1, 1, 2, 3, 5, 8 };
      System.out.println(ns);

  // Java标准库提供了Arrays.toString()，可以快速打印数组内容：
      int[] ns = { 1, 1, 2, 3, 5, 8 };
      System.out.println(Arrays.toString(ns));

  // 打印二维数组：
      1.两层for嵌套
      2.使用Java标准库的Arrays.deepToString()：
        int[][] ns = {
          { 1, 2, 3, 4 },
          { 5, 6, 7, 8 },
          { 9, 10, 11, 12 }
        };
        System.out.println(Arrays.deepToString(ns));

数组排序:
   
  Java的标准库已经内置了排序功能，我们只需要调用JDK提供的Arrays.sort()就可以排序：

    int[] ns = { 28, 12, 89, 73, 65, 18, 96, 50, 8, 36 };
    Arrays.sort(ns);
    System.out.println(Arrays.toString(ns));
    
    // 对数组排序实际上修改了数组本身

    // 对字符串数组排序，实际上修改了数组中存储的指针的指向，内存中字符串的位置并没有改变

面向对象基础：

  方法：

    一个class可以包含多个field，例如，我们给Person类就定义了两个field：
      class Person {
        private String name;
        private int age;
      }

    外部代码不能访问这些field，所以我们需要使用方法（method）来让外部代码可以间接修改field：
      class Person {
        private String name;
        private int age;

        public String getName() {
            return this.name;
        }
        public void setName(String name) {
            this.name = name;
        }

        public int getAge() {
            return this.age;
        }
        public void setAge(int age) {
          if (age < 0 || age > 100) {
            throw new IllegalArgumentException("invalid age value");
          }
          this.age = age;
        }
      }

      public class Main {
        public static void main(String[] args) {
          Person ming = new Person();
          ming.setName("Xiao Ming"); // 设置name
          ming.setAge(12); // 设置age
          System.out.println(ming.getName() + ", " + ming.getAge());
        }
      }

    有public方法，自然就有private方法。和private字段一样，private方法不允许外部调用
    定义private方法的理由是内部方法是可以调用private方法的

    方法参数：
      
      方法可以包含0个或任意个参数。方法参数用于接收传递给方法的变量值。
      调用方法时，必须严格按照参数的定义一一传递。

    可变参数：

      可变参数用类型...定义，可变参数相当于数组类型：
        class Group {
          private String[] names;
          public void setNames(String... names) {
            this.names = names;
          }
        }

        Group g = new Group();
        g.setNames("Xiao Ming", "Xiao Hong", "Xiao Jun"); // 传入3个String

      可变参数可以保证无法传入null，因为传入0个参数时，接收到的实际值是一个空数组而不是null

      基本类型参数的传递，是调用方值的复制。双方各自的后续修改，互不影响。
      引用类型参数的传递，调用方的变量，和接收方的参数变量，指向的是同一个对象。双方任意一方对这个对象的修改，都会影响对方.

  this变量：

    在方法内部，可以使用一个隐含的变量this，它始终指向当前实例。因此，通过this.field就可以访问当前实例的字段。

    如果没有命名冲突，可以省略this。
      class Person {
        private String name;
        public String getName() {
          return name; // 相当于 return this.name
        }
      }

    但是，如果有局部变量和字段重名，那么局部变量优先级更高，就必须加上this：
      class Person {
        private String name；
        public void setName(String name) {
          this.name = name; // 前面的this不可少，少了就变成局部变量name了
        }
      }

  构造方法：

    在创建对象实例时就把内部字段全部初始化为合适的值:
      public class Main {
        public static void main(String[] args) {
          Person p = new Person("Xiao Ming", 15);
          System.out.println(p.getName());
          System.out.println(p.getAge());
        }
      }

      class Person {
        private String name;
        private int age;

        public Person(String name, int age) {
          this.name = name;
          this.age = age;
        }
        
        public String getName() {
          return this.name;
        }

        public int getAge() {
          return this.age;
        }
      }

    由于构造方法是如此特殊，所以构造方法的名称就是类名。构造方法的参数没有限制，在方法内部，也可以编写任意语句。
    但是，和普通方法相比，构造方法没有返回值（也没有void），调用构造方法，必须用new操作符。

    如果一个类没有定义构造方法，编译器会自动为我们生成一个默认构造方法，它没有参数，也没有执行语句

    一个构造方法可以调用其他构造方法，这样做的目的是便于代码复用。调用其他构造方法的语法是this(…)：
      class Person {
        private String name;
        private int age;

        public Person(String name, int age) {
          this.name = name;
          this.age = age;
        }

        public Person(String name) {
          this(name, 18); // 调用另一个构造方法Person(String, int)
        }

        public Person() {
          this("Unnamed"); // 调用另一个构造方法Person(String)
        }
      }

  方法重载：

    在一个类中，我们可以定义多个方法。
    如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成同名方法。

      class Hello {
        public void hello() {
          System.out.println("Hello, world!");
        }

        public void hello(String name) {
          System.out.println("Hello, " + name + "!");
        }

        public void hello(String name, int age) {
          if (age < 18) {
            System.out.println("Hi, " + name + "!");
          } else {
            System.out.println("Hello, " + name + "!");
          }
        }
      }

    方法重载的返回值类型通常都是相同的。
    方法重载的目的是，功能类似的方法使用同一名字，更容易记住，因此，调用起来更简单。

  继承：

    继承是面向对象编程中非常强大的一种机制，它首先可以复用代码。

    class Person { // 定一个person类
      private String name;
      private int age;

      public String getName() {...}
      public void setName(String name) {...}
      public int getAge() {...}
      public void setAge(int age) {...}
    }

    class Student extends Person {
      // 不要重复name和age字段/方法,
      // 只需要定义新增score字段/方法:
      private int score;

      public int getScore() { … }
      public void setScore(int score) { … }
    }

    子类自动获得了父类的所有字段，严禁定义与父类重名的字段！

    在定义Person的时候，没有写extends。
    在Java中，没有明确写extends的类，编译器会自动加上extends Object。所以，任何类，除了Object，都会继承自某个类。
    Java只允许一个class继承自一个类，因此，一个类有且仅有一个父类。只有OSbject特殊，它没有父类。

    继承有个特点，就是子类无法访问父类的private字段或者private方法。例如，Student类就无法访问Person类的name和age字段
    这使得继承的作用被削弱了。为了让子类可以访问父类的字段，我们需要把private改为protected。用protected修饰的字段可以被子类访问：

      class Person {
        protected String name;
        protected int age;
      }

      class Student extends Person {
        public String hello() {
          return "Hello, " + name;
        }
      }

    protected关键字可以把字段和方法的访问权限控制在继承树内部，一个protected字段和方法可以被其子类，以及子类的子类所访问

    超类：

      super关键字表示父类（超类）。子类引用父类的字段时，可以用super.fieldName
        class Student extends Person {
          public String hello() {
            return "Hello, " + super.name;
          }
        }
      实际上，这里使用super.name，或者this.name，或者name，效果都是一样的。编译器会自动定位到父类的name字段。

      在Java中，任何class的构造方法，第一行语句必须是调用父类的构造方法。
      如果没有明确地调用父类的构造方法，编译器会帮我们自动加一句super();
      如果父类没有默认的构造方法，子类就必须显式调用super()并给出参数以便让编译器定位到父类的一个合适的构造方法:

        class Person {
          protected String name;
          protected int age;

          public Person(String name, int age) {
            this.name = name;
            this.age = age;
          }
        }

        class Student extends Person {
          protected int score;

          public Student(String name, int age, int score) {
              super(name, age); // 调用父类的构造方法Person(String, int)
              this.score = score;
          }
        }

      子类不会继承任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的。

    阻止继承:

      正常情况下，只要某个class没有final修饰符，那么任何类都可以从该class继承
      从Java 15开始，允许使用sealed修饰class，并通过permits明确写出能够从该class继承的子类名称:

        public sealed class Shape permits Rect, Circle, Triangle {
          ...
        } // Shape类就是一个sealed类，它只允许指定的3个类继承它
      这种sealed类主要用于一些框架，防止继承被滥用。

    向上转型：
       
      如果一个引用变量的类型是Student，那么它可以指向一个Student类型的实例：
        Student stu = new Student();

      如果一个引用类型的变量是Person，那么它可以指向一个Person类型的实例：
        Person per = new Person();

      如果Student是从Person继承下来的，那么，一个引用类型为Person的变量，能指向Student类型的实例
      因为Student继承自Person，因此，它拥有Person的全部功能。

      这种把一个子类类型安全地变为父类类型的赋值，被称为向上转型（upcasting）。
      向上转型实际上是把一个子类型安全地变为更加抽象的父类型：

        Student s = new Student();
        Person p = s; // upcasting, ok
        Object o1 = p; // upcasting, ok
        Object o2 = s; // upcasting, ok
        // 继承树是Student > Person > Object，所以，可以把Student类型转型为Person，或者更高层次的Object。

    向下转型：

      和向上转型相反，如果把一个父类类型强制转型为子类类型，就是向下转型（downcasting）

        Person p1 = new Student(); // upcasting, ok
        Person p2 = new Person();
        Student s1 = (Student) p1; // ok
        Student s2 = (Student) p2; // runtime error! ClassCastException!
        // 不能把父类变为子类，因为子类功能比父类多，多的功能无法凭空变出来

      为了避免向下转型出错，Java提供了instanceof操作符，可以先判断一个实例究竟是不是某种类型：

        Person p = new Person();
        System.out.println(p instanceof Person); // true
        System.out.println(p instanceof Student); // false

        Student s = new Student();
        System.out.println(s instanceof Person); // true
        System.out.println(s instanceof Student); // true
        
      利用instanceof，在向下转型前可以先判断：

        Person p = new Student();
        if (p instanceof Student) {
          // 只有判断成功才会向下转型:
          Student s = (Student) p; // 一定会成功
        }
    
    区分继承和组合:

      在使用继承时，我们要注意逻辑一致性:

        class Book {
          protected String name;
          public String getName() {...}
          public void setName(String name) {...}
        }

        具有has关系不应该使用继承，而是使用组合，即Student可以持有一个Book实例：

          class Student extends Person {
            protected Book book; // 组合关系
            protected int score;
          }

  多态：

    在继承关系中，子类如果定义了一个与父类方法签名完全相同的方法，被称为覆写（Override）：

      class Person {
        public void run() {
          System.out.println("Person.run");
        }
      }
      class Student extends Person {
        @Override
        public void run() {
          System.out.println("Student.run");
        }
      }

      //Override和Overload不同的是：
        如果方法签名不同，就是Overload，Overload方法是一个新方法；
        如果方法签名相同，并且返回值也相同，就是Override。

      方法名相同，方法参数相同，但方法返回值不同，也是不同的方法。在Java程序中，出现这种情况，编译器会报错：

        class Person {
          public void run() { … }
        }

        class Student extends Person {
          // 不是Override，因为参数不同:
          public void run(String s) { … }
          // 不是Override，因为返回值不同:
          public int run() { … }
        }

      加上@Override可以让编译器帮助检查是否进行了正确的覆写。希望进行覆写，但是不小心写错了方法签名，编译器会报错:

        public class Main {
          public static void main(String[] args) {
            ...
          }
        }
        class Person {
          public void run() {}
        }
        public class Student extends Person {
          @Override // Compile error!
          public void run(String s) {} 
        }
      但是@Override不是必需的

      引用变量的声明类型可能与其实际类型不符，例如：
        Person p = new Student();
      
    Java的实例方法调用是基于运行时的实际类型的动态调用，而非变量的声明类型。
    这个非常重要的特性在面向对象编程中称之为多态:

      public class Main {
        public static void main(String[] args) {
          Person p = new Student();
          p.run(); // 应该打印Student.run
        }
      }
      class Person {
        public void run() {
          System.out.println("Person.run");
        }
      }
      class Student extends Person {
        @Override
        public void run() {
          System.out.println("Student.run");
        }
      }

    多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法.
    对某个类型调用某个方法，执行的实际方法可能是某个子类的覆写方法.
    多态具有一个非常强大的功能，就是允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码。

    覆写Object方法:

      因为所有的class最终都继承自Object，而Object定义了几个重要的方法：

        toString()：把instance输出为String；
        equals()：判断两个instance是否逻辑相等；
        hashCode()：计算一个instance的哈希值。

      在必要的情况下，我们可以覆写Object的这几个方法。例如：

        class Person {
          ...
          // 显示更有意义的字符串:
          @Override
          public String toString() {
              return "Person:name=" + name;
          }

          // 比较是否相等:
          @Override
          public boolean equals(Object o) {
              // 当且仅当o为Person类型:
              if (o instanceof Person) {
                  Person p = (Person) o;
                  // 并且name字段相同时，返回true:
                  return this.name.equals(p.name);
              }
              return false;
          }

          // 计算hash:
          @Override
          public int hashCode() {
              return this.name.hashCode();
          }
        }

    调用super：

      在子类的覆写方法中，如果要调用父类的被覆写的方法，可以通过super来调用。例如：

        class Person {
            protected String name;
            public String hello() {
                return "Hello, " + name;
            }
        }
        Student extends Person {
            @Override
            public String hello() {
                // 调用父类的hello()方法:
                return super.hello() + "!";
            }
        }

    final：

      继承可以允许子类覆写父类的方法。
      如果一个父类不允许子类对它的某个方法进行覆写，可以把该方法标记为final。用final修饰的方法不能被Override：

        class Person {
            protected String name;
            public final String hello() {
                return "Hello, " + name;
            }
        }
        Student extends Person {
            // compile error: 不允许覆写
            @Override
            public String hello() {
            }
        }

      如果一个类不希望任何其他类继承自它，那么可以把这个类本身标记为final。用final修饰的类不能被继承：

        final class Person {
            protected String name;
        }
        // compile error: 不允许继承自Person
        Student extends Person {
        }

      对于一个类的实例字段，同样可以用final修饰。用final修饰的字段在初始化后不能被修改。例如：

        class Person {
            public final String name = "Unamed";
        }
        Person p = new Person();
        p.name = "New Name"; // compile error!

      可以在构造方法中初始化final字段：

        class Person {
            public final String name;
            public Person(String name) {
                this.name = name;
            }
        }
      
抽象类：

  由于多态的存在，每个子类都可以覆写父类的方法
  如果父类的方法本身不需要实现任何功能，仅仅是为了定义方法签名，目的是让子类去覆写它，那么，可以把父类的方法声明为抽象方法：

    class Person {
      public abstract void run();
    }
  
  把一个方法声明为abstract，表示它是一个抽象方法，本身没有实现任何方法语句。
  因为这个抽象方法本身是无法执行的，所以，Person类也无法被实例化。编译器会告诉我们，无法编译Person类，因为它包含抽象方法。
  必须把Person类本身也声明为abstract，才能正确编译它：

    abstract class Person {
      public abstract void run();
    }

  如果一个class定义了方法，但没有具体执行代码，这个方法就是抽象方法，抽象方法用abstract修饰。
  使用abstract修饰的类就是抽象类。我们无法实例化一个抽象类：
    Person p = new Person(); // 编译错误

  因为抽象类本身被设计成只能用于被继承，因此，抽象类可以强迫子类实现其定义的抽象方法，否则编译会报错。
  因此，抽象方法实际上相当于定义了“规范”。

    public class Main {
      public static void main(String[] args) {
        Person p = new Student();
        p.run();
      }
    }

    abstract class Person {
      public abstract void run();
    }
    class Student extends Person {
      @Override
      public void run() {
          System.out.println("Student.run");
      }
    }

  面向抽象编程：
    
    当我们定义了抽象类Person，以及具体的Student、Teacher子类的时候，我们可以通过抽象类Person类型去引用具体的子类的实例：

      Person stu = new Student();
      Person tch = new Teacher();

    这种引用抽象类的好处在于，我们对其进行方法调用，并不关心Person类型变量的具体子类型：
      stu.run();
      tch.run();

    面向抽象编程的本质就是：

      1.上层代码只定义规范（例如：abstract class Person）；
      2.不需要子类就可以实现业务逻辑（正常编译）；
      3.具体的业务逻辑由不同的子类实现，调用者并不关心。
      
接口：
  
  在抽象类中，抽象方法本质上是定义接口规范：
    即规定高层类的接口，从而保证所有子类都有相同的接口实现，这样，多态就能发挥出威力。
    如果一个抽象类没有字段，所有方法全部都是抽象方法：

      abstract class Person {
          public abstract void run();
          public abstract String getName();
      }
    
    就可以把该抽象类改写为接口：interface：

      interface Person {
        void run();
        String getName();
      }

  所谓interface，就是比抽象类还要抽象的纯抽象接口，因为它连字段都不能有。
  因为接口定义的所有方法默认都是public abstract的，所以这两个修饰符不需要写出来（写不写效果都一样）。
  当一个具体的class去实现一个interface时，需要使用implements关键字：

    class Student implements Person {
      private String name;

      public Student(String name) {
          this.name = name;
      }

      @Override
      public void run() {
          System.out.println(this.name + " run");
      }

      @Override
      public String getName() {
          return this.name;
      }
    }

  在Java中，一个类只能继承自另一个类，不能从多个类继承。但是，一个类可以实现多个interface，例如：

    class Student implements Person, Hello { // 实现了两个interface
        ...
    }

  一个interface可以继承自另一个interface。interface继承自interface使用extends，它相当于扩展了接口的方法：

    interface Hello {
      void hello();
    }

    interface Person extends Hello {
      void run();
      String getName();
    }

  静态字段和静态方法：

    在一个class中定义的字段，我们称之为实例字段。
    实例字段的特点是，每个实例都有独立的字段，各个实例的同名字段互不影响。